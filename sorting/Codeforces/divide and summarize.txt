#include<bits/stdc++.h>
using namespace std;
//#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

#define ll long long
#define fast ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define test int t; cin>>t; while(t--)
#define pb push_back
#define mp(a,b) make_pair(a,b)
#define f0(i,n) for( ll i = 0; i < ( n ); i ++)
#define f1(i,n) for(i = 1; i <= ( n ); i ++)
#define f(i,m,n) for(auto i = ( m ); i <= ( n ); i ++)
#define nl cout<<"\n"
#define  mod 1000000007
#define fir first
#define sec second
#define all(a) a.begin(),a.end()
#define rall(v) v.rbegin(), v.rend()
#define SZ(x) ((ll)x.size())
#define mem(a, b) memset(a, b, sizeof(a));
#define make_graph(k) int x,y; f0(i,k){cin>>x>>y; adj[x].pb(y); adj[y].pb(x);}
#define dekh cout<<"dekh"

#define o_set tree<ll, null_type, less<ll>, rb_tree_tag, tree_order_statistics_node_update>
#define o_setpll tree<pair<ll,ll>, null_type, less<pair<ll,ll>>, rb_tree_tag, tree_order_statistics_node_update>
typedef vector<ll> vl;

ll INF=1e18;


ll Pow(ll a, ll b, ll m){
    if(b==0)return 1;
    if(b%2==0){
        ll x = a*a;
        x%=m;
        return Pow(x,b/2,m);
    }
    return (a*Pow(a,b-1,m))%m;
}

ll binExp(ll x,ll n)
{
    ll res=1;
    while(n)
    {
        if(n&1) res=(res*x)%mod;
        x=(x*x)%mod;
        n>>=1;
    }
    return res;
}

ll modInv(ll i) {return binExp(i,mod-2);}

vector<ll>adj[300005];
 ll vis[300005]={0};
ll tin[10],tout[10];
ll ti=1;

void dfs(ll node )
{
        vis[node]=1;
        tin[node]=ti++;

        for(auto child : adj[node])
        {
            if(!vis[child])dfs(child);
        }
        tout[node]=ti-1;
}



bool isp(ll n)
{
    for(ll i=2;i*i<=n;i++)
    {
        if(n%i==0)return false;
    }
    return true;
}
ll nod(ll n)
{
    ll cnt=0;
    while(n)
    {   cnt+=n%10;
        //cnt++;
        n/=10;

    }return cnt;
}
// COMBINATION +++++++++++++++++++++++++++++++++++++++++++++++++++

ll fac[200005],infac[200005];
 ll comb( ll n, ll r )
 {
     if(r>n)return 0;
     return fac[n]%mod*infac[n-r]%mod*infac[r]%mod;
 }

 void facto()
 {     fac[0]=1;infac[0]=1;
           f(i,1,200001)
            {
                fac[i]=(fac[i-1]*i)%mod;
                infac[i]=Pow(fac[i],mod-2,mod);
            }
 }
 //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
//  mujse nai ho rhi coding

// from editorial
 ll sum[200005];map<ll,ll>mp;ll arr[200005];ll n,q;
 void solve( ll l, ll r )
 {
     if(l>r)return;
      ll num  = sum[r]-sum[l-1];
      if(l==r){ mp[num]++;return; }
      mp[num]++;
      ll mid = (arr[l]+arr[r])/2;
      ll ind = lower_bound( arr+1,arr+n+1 ,mid+1)-arr;
      ind--;
      if(ind==r){return; }
      solve( l, ind );
      solve(ind+1,r);
 }


int main()
{
    fast
    test
    {
        mp.clear();
        cin>>n>>q;
       // ll arr[n+1];
       ll i;
        f1(i,n)cin>>arr[i];
        sort(arr+1,arr+n+1);
        //ll sum[n+1]={0};
        f1(i,n){
            sum[i]=sum[i-1]+arr[i];
        }
        solve(1,n);
        //f1(i,15)cout<<mp[i]<<" ";
      //  if(sum[n]==s){ cout<<"Yes";nl;continue; }
        while(q--)
        {  ll k;
             cin>>k;
             if(mp[k])cout<<"Yes";
             else cout<<"No";
             nl;

        }


    }
}




