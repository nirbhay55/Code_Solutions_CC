void shift (ll si)
{
    ll a = st[si].ar[1];
    st[si].ar[1]=st[si].ar[0];
    st[si].ar[0]=a;
}

// for lazy propagation

ll arr[500005],lazy[500005];
node st[500005];
void shift (ll si)
{
    ll a = st[si].ar[1];
    st[si].ar[1]=st[si].ar[0];
    st[si].ar[0]=a;
}

void buildtree( ll si, ll ss, ll se )
{
    if(ss==se)
    {   if(arr[ss]==0){ st[si].ar[0]=1; }
        else st[si].ar[1]=1;
        return;
    }
    ll mid = (ss+se)/2;
    buildtree( 2*si, ss, mid );
    buildtree( 2*si+1, mid+1,se );


    st[si].ar[1]=st[2*si].ar[1]+st[2*si+1].ar[1];
    st[si].ar[0]=st[2*si].ar[0]+st[2*si+1].ar[0];
}

ll query( ll si, ll ss , ll se, ll qs, ll qe )
{
     if(lazy[si]!=0)
    {
        ll dx = lazy[si];       // for pending updates
        lazy[si]=0;

        if(ss!=se)
        lazy[2*si]+=dx,lazy[2*si+1]+=dx;    // updating lazy child node

        dx%=2;
        f0(i,dx)
        {
            shift(si);           //updating segment tree
        }
    }

    if(qs>se || qe<ss)return 0;
    if( qs<=ss && qe>=se )
    {
        if(st[si].ar[1]){return 1;}
        return 0;
    }

    ll mid = (ss+se)/2;
    ll l = query( 2*si, ss ,mid, qs,qe);
    ll r = query( 2*si+1, mid+1 ,se, qs,qe);

    return l+r;
}

void update(ll si, ll ss, ll se, ll qs, ll qe, ll val )
{
    if(lazy[si]!=0)
    {
        ll dx = lazy[si];       // for pending updates
        lazy[si]=0;

        if(ss!=se)
        lazy[2*si]+=dx,lazy[2*si+1]+=dx;    // updating lazy child node

        dx%=2;
        f0(i,dx)
        {
            shift(si);           //updating segment tree
        }
    }

    if(qs>se || qe<ss)return ;
    if( qs<=ss && qe>=se )
    {
        shift(si);                // updating segment tree

        if(ss!=se)
        {
            lazy[2*si]+=val;lazy[2*si+1]+=val;   //updating lazy child node
        }
        return;
    }

    ll mid = (ss+se)/2;

      update( 2*si, ss, mid,qs,qe ,val );
      update( 2*si+1, mid+1, se ,qs,qe,val );

    st[si].ar[0]=st[2*si].ar[0]+st[2*si+1].ar[0];
    st[si].ar[1]=st[2*si].ar[1]+st[2*si+1].ar[1];

}

//=======================================================================================
//  Nxt smallest number

 stack<pair<ll,ll>>st;
        stack<pair<ll,ll>>st2;
        vl v,v2;
        for(ll i=n-1;i>=0;i--)
        {
            if(st.size()==0)
            v.pb(n+1);

            else if( st.size()>0 && st.top().first<arr[i] )
            {
                v.pb( st.top().second +1 );
            }
            else if( st.size()>0 && st.top().first>=arr[i] )
            {
                while(st.size()>0 && st.top().first>=arr[i])
                {
                    st.pop();
                }
                if(st.size()==0)v.pb(n+1);
                else v.pb( st.top().second +1 );
            }
            st.push({arr[i],i});
        }


 //==========================================================================================

 vector<int> pf[5000005],pr;      // pr stores the prime numbers from starting
void process_seive(){             // pf stores the prime factors of the number
    f(i,2,5000000){
        if(SZ(pf[i])) continue;
        pr.pb(i);
        for(int j=i;j<=5000000;j+=i){
            pf[j].pb(i);
        }
    }
}
//===============================================================================

Topological sorting
 void kahn( ll n  )
{
    priority_queue< int, vector<int>, greater<int>>q;
    set<ll>s;
    f1(i,n)
    {
        if(in[i]==0)q.push( i );
    }
    while(!q.empty())
    {
        ll cur = q.top();
        //cout<<cur;nl;
        ans.pb( cur );
        q.pop();

        for( int node : adj[cur])
        {
            in[node]--;
            if(in[node]==0) q.push(node);
        }
    }
}

// +++++++++++++++++++++++++++++++++++++======================================+++++++++++++++++++++


 void bfs(  ll src)
 {
     q.push( src );
     dist[src]=0;
     vis[src]=1;

     while(!q.empty())
     {
         ll curr = q.front();
         q.pop();

         for(auto node : adj[curr])
         {
             dist[node]= dist[curr]+1;
             vis[node]=1;
             q.push( node );
         }
     }
 }

 //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

 For strongly connected components kosaraju algo

 vi ar[1000001];
vi tr[1000001];

int vis[1000001];
int val[1000001];

vi order;
vi SCC;

void dfs(int node)
{
	vis[node] = 1;

	for(int child : ar[node])
	if(vis[child] == 0)
	dfs(child);

	order.pb(node);      //order array stores order in which 2nd dfs call has to be made
}

void dfs1(int node)
{
	vis[node] = 1;

	for(int child : tr[node])
	if(vis[child] == 0)
	dfs1(child);

	SCC.pb(node);
}

int main()
{
	int n , t, res;
	cin>>t;

	while(t--)
	{
		cin>>n;
		order.clear(),res=0;

		REP(i , n) ar[i-1].clear() , tr[i-1].clear() , vis[i-1] = 0, cin>>val[i-1];

		REP(i , n)
		{
			int a= i-1;
            int b= (i-1 + val[i-1]+1)%n;
            ar[a].pb(b);
            tr[b].pb(a);
		}

		REP(i , n)
		if(vis[i-1] == 0) dfs(i-1);

		REP(i , n) vis[i-1] = 0;

        reverse(order.begin(), order.end());

		for(int i: order)
		if(vis[i] == 0)
		{
			SCC.clear();
			dfs1(i);

			if(SCC.size()==1 && (SCC[0]!= ar[SCC[0]][0])) continue;   // self loop wali condition ke liye

            res+=SCC.size();
		}
        cout<<res<<endl;
	}

 // ===============================================================================================
  orientaion of three points

 ll orien ( ll a1, ll a2, ll b1, ll b2, ll c1 ,ll c2 )
{
    ll val = ( b2-a2 )*( c1-b1 )- ( a2-a1 )*( c2-b2 );
    if(val==0)return 0;   // collinear;

    return (val>0) ? 1:2; // clock or counterclockwise
}

 ==================================================================================

 //for bipartite graph

 void dfs(ll node,ll c )
{
        vis[node]=1;  col[node]=c;
        for(auto child : adj[node])
        {
            if(vis[child]==0)
            {
                dfs( child,c^1 );
            }
            else
            {
                if( col[child]== col[node] ){flag=1;} // if flag =1 graph is bipartite
            }

        }

}

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

factorial and combination

ll fac[200005],infac[200005];
 ll comb( ll n, ll r )
 {
     if(r>n)return 0;
     return (fac[n]%mod*infac[n-r]%mod*infac[r]%mod)%mod;
 }

 void facto()
 {     fac[0]=1;infac[0]=1;
           f(i,1,200001)
            {
                fac[i]=(fac[i-1]*i)%mod;
                infac[i]=Pow(fac[i],mod-2,mod);
            }
 }

 ===================================================================================
                                    DSU

 ll par[100005];
ll rnk[100005];

ll findp(ll a)
{
    if( par[a]<0 )return a;
    return par[a]=findp(par[a] );
}

void mergep( ll a,ll b )
{
    a = findp(a);
    b= findp(b);
    if(a==b)return;
    if( rnk[a]>rnk[b] )par[b]=a,rnk[a]+=rnk[b];
    else par[a]=b,rnk[b]+=rnk[a];

}

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
