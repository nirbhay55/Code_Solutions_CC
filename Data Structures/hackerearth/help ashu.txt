#include<bits/stdc++.h>
using namespace std;
//#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

#define ll long long
#define fast ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define test int t; cin>>t; while(t--)
#define pb push_back
#define mp(a,b) make_pair(a,b)
#define f0(i,n) for( ll i = 0; i < ( n ); i ++)
#define f1(i,n) for(i = 1; i <= ( n ); i ++)
#define f(i,m,n) for(auto i = ( m ); i <= ( n ); i ++)
#define nl cout<<"\n"
#define  mod 1000000007
#define fi first
#define se second
#define all(a) a.begin(),a.end()
#define rall(v) v.rbegin(), v.rend()
#define SZ(x) ((ll)x.size())
#define mem(a, b) memset(a, b, sizeof(a));
#define make_graph(k) int x,y; f0(i,k){cin>>x>>y; adj[x].pb(y); adj[y].pb(x);}
#define dekh cout<<"dekh"

#define o_set tree<ll, null_type, less<ll>, rb_tree_tag, tree_order_statistics_node_update>
#define o_setpll tree<pair<ll,ll>, null_type, less<pair<ll,ll>>, rb_tree_tag, tree_order_statistics_node_update>
typedef vector<ll> vl;

ll INF=1e18;

/*
ll Pow(ll a, ll b, ll m){
    if(b==0)return 1;
    if(b%2==0){
        ll x = a*a;
        x%=m;
        return Pow(x,b/2,m);
    }
    return (a*Pow(a,b-1,m))%m;
}

ll binExp(ll x,ll n)
{
    ll res=1;
    while(n)
    {
        if(n&1) res=(res*x)%mod;
        x=(x*x)%mod;
        n>>=1;
    }
    return res;
}

ll modInv(ll i) {return binExp(i,mod-2);}
*//*
vector<ll>adj[300005];
 ll vis[300005]={0};
ll mx = -1;

void dfs(ll node )
{
        vis[node]=1;
        mx = max(node,mx);

        for(auto child : adj[node])
        {
            if(!vis[child])dfs(child);
        }

}

*/

bool isp(ll n)
{
    for(ll i=2;i*i<=n;i++)
    {
        if(n%i==0)return false;
    }
    return true;
}
ll nod(ll n)
{
    ll cnt=0;
    while(n)
    {   cnt+=n%10;
        //cnt++;
        n/=10;

    }return cnt;
}

//  mujse nai ho rhi coding      . .

ll arr[500005],st[400005],even[400005];

void buildtree( ll si, ll ss, ll se )
{
    if(ss==se)
    {
        st[si]=arr[ss]%2;
        return;
    }
    ll mid = (ss+se)/2;
    buildtree( 2*si, ss, mid );
    buildtree( 2*si+1, mid+1,se );

    st[si]=st[2*si]+st[2*si+1];
}

ll query( ll si, ll ss , ll se, ll qs, ll qe )
{
    if(qs>se || qe<ss)return 0;
    if( qs<=ss && qe>=se )
    {
        return st[si];
    }

    ll mid = (ss+se)/2;
    ll l = query( 2*si, ss ,mid, qs,qe);
    ll r = query( 2*si+1, mid+1 ,se, qs,qe);

    return l+r;
}

void update(ll si, ll ss, ll se, ll qi)
{
    if(ss==se)
    {
        st[si]=arr[ss]%2;
        return;
    }
    ll mid = (ss+se)/2;

    if(qi<=mid){  update( 2*si, ss, mid,qi ); }
    else update( 2*si+1, mid+1, se ,qi );

    st[si]=st[2*si]+st[2*si+1];
}

int main()
{
    fast

    ll n;cin>>n; ll i;
    f1(i,n)cin>>arr[i];
    ll q;cin>>q;
    buildtree( 1,1,n );
   // f1(i,2*n){ cout<<odd[i]<<" "; }nl;
    //f1(i,2*n){ cout<<even[i]<<" "; }nl;
    while(q--)
    {
       ll a,x,y;
       cin>>a>>x>>y;
       if(a==0)
       {
           if((arr[x])%2==(y%2))continue;
           arr[x]=y;
           update(1,1,n,x);
       }
       else
       {
           ll ans=query( 1,1,n,x,y );
           if(a==2){ cout<<ans;nl; }
           else { cout<<(y-x+1)-ans;nl; }
       }

    }

}





