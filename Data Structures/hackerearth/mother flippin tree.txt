#include<bits/stdc++.h>
using namespace std;
//#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

#define ll long long
#define fast ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define test int t; cin>>t; while(t--)
#define pb push_back
#define mp(a,b) make_pair(a,b)
#define f0(i,n) for( ll i = 0; i < ( n ); i ++)
#define f1(i,n) for(i = 1; i <= ( n ); i ++)
#define f(i,m,n) for(auto i = ( m ); i <= ( n ); i ++)
#define nl cout<<"\n"
#define  mod 1000000007
#define fir first
#define sec second
#define all(a) a.begin(),a.end()
#define rall(v) v.rbegin(), v.rend()
#define SZ(x) ((ll)x.size())
#define mem(a, b) memset(a, b, sizeof(a));
#define make_graph(k) int x,y; f0(i,k){cin>>x>>y; adj[x].pb(y); adj[y].pb(x);}
#define dekh cout<<"dekh"

#define o_set tree<ll, null_type, less<ll>, rb_tree_tag, tree_order_statistics_node_update>
#define o_setpll tree<pair<ll,ll>, null_type, less<pair<ll,ll>>, rb_tree_tag, tree_order_statistics_node_update>
typedef vector<ll> vl;

ll INF=1e18;
struct node
{
    int ar[2];
};


ll Pow(ll a, ll b, ll m){
    if(b==0)return 1;
    if(b%2==0){
        ll x = a*a;
        x%=m;
        return Pow(x,b/2,m);
    }
    return (a*Pow(a,b-1,m))%m;
}

ll binExp(ll x,ll n)
{
    ll res=1;
    while(n)
    {
        if(n&1) res=(res*x)%mod;
        x=(x*x)%mod;
        n>>=1;
    }
    return res;
}

ll modInv(ll i) {return binExp(i,mod-2);}

vector<ll>adj[300005];
 ll vis[300005]={0};
ll tin[100005],tout[100005];
ll ti=1;

void dfs(ll node )
{
        vis[node]=1;
        tin[node]=ti++;

        for(auto child : adj[node])
        {
            if(!vis[child])dfs(child);
        }
        tout[node]=ti-1;
}



bool isp(ll n)
{
    for(ll i=2;i*i<=n;i++)
    {
        if(n%i==0)return false;
    }
    return true;
}
ll nod(ll n)
{
    ll cnt=0;
    while(n)
    {   cnt+=n%10;
        //cnt++;
        n/=10;

    }return cnt;
}

//  mujse nai ho rhi coding      . .

ll arr[500005],lazy[500005];
node st[500005];
void shift (ll si)
{
    ll a = st[si].ar[1];
    st[si].ar[1]=st[si].ar[0];
    st[si].ar[0]=a;
}

void buildtree( ll si, ll ss, ll se )
{
    if(ss==se)
    {   if(arr[ss]==0){ st[si].ar[0]=1; }
        else st[si].ar[1]=1;
        return;
    }
    ll mid = (ss+se)/2;
    buildtree( 2*si, ss, mid );
    buildtree( 2*si+1, mid+1,se );


    st[si].ar[1]=st[2*si].ar[1]+st[2*si+1].ar[1];
    st[si].ar[0]=st[2*si].ar[0]+st[2*si+1].ar[0];
}

ll query( ll si, ll ss , ll se, ll qs, ll qe )
{
     if(lazy[si]!=0)
    {
        ll dx = lazy[si];       // for pending updates
        lazy[si]=0;

        if(ss!=se)
        lazy[2*si]+=dx,lazy[2*si+1]+=dx;    // updating lazy child node

        dx%=2;
        f0(i,dx)
        {
            shift(si);           //updating segment tree
        }
    }

    if(qs>se || qe<ss)return 0;
    if( qs<=ss && qe>=se )
    {
        if(st[si].ar[1]){return 1;}
        return 0;
    }

    ll mid = (ss+se)/2;
    ll l = query( 2*si, ss ,mid, qs,qe);
    ll r = query( 2*si+1, mid+1 ,se, qs,qe);

    return l+r;
}

void update(ll si, ll ss, ll se, ll qs, ll qe, ll val )
{
    if(lazy[si]!=0)
    {
        ll dx = lazy[si];       // for pending updates
        lazy[si]=0;

        if(ss!=se)
        lazy[2*si]+=dx,lazy[2*si+1]+=dx;    // updating lazy child node

        dx%=2;
        f0(i,dx)
        {
            shift(si);           //updating segment tree
        }
    }

    if(qs>se || qe<ss)return ;
    if( qs<=ss && qe>=se )
    {
        shift(si);                // updating segment tree

        if(ss!=se)
        {
            lazy[2*si]+=val;lazy[2*si+1]+=val;   //updating lazy child node
        }
        return;
    }

    ll mid = (ss+se)/2;

      update( 2*si, ss, mid,qs,qe ,val );
      update( 2*si+1, mid+1, se ,qs,qe,val );

    st[si].ar[0]=st[2*si].ar[0]+st[2*si+1].ar[0];
    st[si].ar[1]=st[2*si].ar[1]+st[2*si+1].ar[1];

}

int main()
{
    fast

    ll n;cin>>n; ll i;

    make_graph(n-1);
    dfs(1);
    ll brr[n+1];
    f1(i,n){ cin>>brr[i]; }

    f1(i,n)
    {
        arr[tin[i]]=brr[i];
    }
    buildtree(1,1,n);
    ll q; cin>>q;
    while(q--)
    {
       string s;ll x;
       cin>>s>>x;

       if(s=="flip")
       {
           update(1,1,n,tin[x],tout[x],1);
       }
       else
       {
           cout<<query( 1 ,1, n, tin[x],tin[x]  )<<" ";
       }

    }

}





