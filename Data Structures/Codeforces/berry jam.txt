#include<bits/stdc++.h>
using namespace std;
//#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;

#define ll long long
#define fast ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
#define test int t; cin>>t; while(t--)
#define pb push_back
#define mp(a,b) make_pair(a,b)
#define f0(i,n) for( ll i = 0; i < ( n ); i ++)
#define f1(i,n) for( ll i = 1; i <= ( n ); i ++)
#define f(i,m,n) for(auto i = ( m ); i <= ( n ); i ++)
#define fr(i,m,n) for( auto i=(m);i>=(n);i--)
#define nl cout<<"\n"
#define  mod 1000000007
#define fir first
#define sec second
#define all(a) a.begin(),a.end()
#define rall(v) v.rbegin(), v.rend()
#define SZ(x) ((ll)x.size())
#define mem(a, b) memset(a, b, sizeof(a));
#define make_graph(k) int x,y; f0(i,k){cin>>x>>y; adj[x].pb(y); adj[y].pb(x);}
#define dekh cout<<"dekh"

#define o_set tree<ll, null_type, less<ll>, rb_tree_tag, tree_order_statistics_node_update>
#define o_setpll tree<pair<ll,ll>, null_type, less<pair<ll,ll>>, rb_tree_tag, tree_order_statistics_node_update>
typedef vector<ll> vl;

ll INF=1e18;
;


ll Pow(ll a, ll b, ll m){
    if(b==0)return 1;
    if(b%2==0){
        ll x = a*a;
        x%=m;
        return Pow(x,b/2,m);
    }
    return (a*Pow(a,b-1,m))%m;
}

bool isp(ll n)
{
    for(ll i=2;i*i<=n;i++)
    {
        if(n%i==0)return false;
    }
    return true;
}


// COMBINATION +++++++++++++++++++++++++++++++++++++++++++++++++++
/*
ll fac[200005],infac[200005];
 ll comb( ll n, ll r )
 {
     if(r>n)return 0;
     return (fac[n]%mod*infac[n-r]%mod*infac[r]%mod)%mod;
 }

 void facto()
 {     fac[0]=1;infac[0]=1;
           f(i,1,200001)
            {
                fac[i]=(fac[i-1]*i)%mod;
                infac[i]=Pow(fac[i],mod-2,mod);
            }
 }*/
 //++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

//  mujse nai ho rhi coding      . .

// a^b=a+b-2*(a&b)
/*
vector<ll>adj[300005];
 ll vis[300005]={0};
 ll vis2[300005]={0};


bool dfs(ll node,ll par )
{
    //cout<<node<<" dfs1 ";nl;
        vis[node]=1;

        for(auto child : adj[node])
        {
            if(vis[child]==0)
            {
                if(dfs(child,node)==true)return true;
            }
            else
            {
                if(child!=par)return true;
            }
        }
    return false;
}*/
//===========================================================
/*vector<int> pf[5000005],pr;
void process_seive(){
    f(i,2,5000000){
        if(SZ(pf[i])) continue;
        pr.pb(i);
        for(int j=i;j<=5000000;j+=i){
            pf[j].pb(i);
        }
    }
}*/
//============================================================

// from editorial code


int main()
{
     //if(n &(n-1)==0) then n is a power of 2
     test
     {
        ll n,i;
        cin>>n;
        ll arr[2*n+2];
        ll difst=0;
        f1(i,2*n){cin>>arr[i];
            if(arr[i]==2)difst++;
            else difst--;
        }
        if(difst==0){ cout<<"0";nl;continue; }

        ll dpleft2[2*n]={0};
        ll dpleft1[2*n]={0};

        for( i=n;i>=1;i-- )
        {
            if( arr[i]==2 )dpleft2[i]=dpleft2[i+1]+1;
            else dpleft2[i]=dpleft2[i+1];

            if( arr[i]==1 )dpleft1[i]=dpleft1[i+1]+1;
            else dpleft1[i]=dpleft1[i+1];
        }

         //f1(i,n){ cout<<dpleft2[i]<<" "; }nl;
        //f1(i,n){ cout<<dpleft1[i]<<" "; }nl;

        ll dprt2[2*n+5]={0};
        ll dprt1[2*n+5]={0};

        for(i=n+1;i<=(2*n);i++)
        {
            if( arr[i]==2 )dprt2[i]=dprt2[i-1]+1;
            else dprt2[i]=dprt2[i-1];

            if( arr[i]==1 )dprt1[i]=dprt1[i-1]+1;
            else dprt1[i]=dprt1[i-1];
        }
         //f(i,n+1,(2*n)){ cout<<dprt2[i]<<" "; }nl;
        //f(i,n+1,(2*n)){ cout<<dprt1[i]<<" "; }nl;
        map<ll,ll>mp;
        for(i=(2*n);i>=(n+1);i--)
        {
            ll diff = dprt2[i]-dprt1[i];
            //cout<<diff<<" ";
            mp[diff]=i;
        }
        for(i=(2*n);i>=(n+1);i--)
        {
             ll diff = dprt2[i]-dprt1[i];
             //cout<<mp[diff]<<" ";
        }
        ll ans=INT_MAX;
        for(i=1;i<=n;i++)
        {
            ll diff = dpleft2[i]-dpleft1[i];
            ll x = difst - diff;
                //cout<<diff<<" "<<x;nl;
            if(x==0){ ans = min( ans,n-i+1 ); }


            if(mp[x]!=0)
            {
                ans= min( ans, mp[x]-i+1 );
                //cout<<mp[x];nl;
            }
          //  cout<<ans;nl;
        }
        if( mp[difst]!=0 ){ ans = min(ans,mp[difst]-n); }
        if(ans==INT_MAX)ans=2*n;
        cout<<ans;nl;
     }

}





